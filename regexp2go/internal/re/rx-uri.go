// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="re" -fn="RxURI" -pool=true "[\\w]+://[^/\\s?#]+[^\\s?#]+(?:\\?[^\\s#]*)?(?:#[^\\s]*)?"

package re

import "regexp/syntax"
import "strings"
import "unicode/utf8"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const RxURIRegexp = "[\\w]+://[^/\\s?#]+[^\\s?#]+(?:\\?[^\\s#]*)?(?:#[^\\s]*)?"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeRxURI uint8

const (
	modeMatchRxURI modeTypeRxURI = iota
	modeFirstRxURI
	modeLongestRxURI
)

// RxURI implements the regular expression
// "[\\w]+://[^/\\s?#]+[^\\s?#]+(?:\\?[^\\s#]*)?(?:#[^\\s]*)?"
// with flags 212.
type RxURI struct{}
type stateRxURI struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e RxURI) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [7]stateRxURI // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstRxURI, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e RxURI) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [7]stateRxURI // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestRxURI, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e RxURI) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [7]stateRxURI // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstRxURI, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e RxURI) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [7]stateRxURI // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestRxURI, bt[:0])
	return
}

func (e RxURI) doByteSlice(s []byte, m modeTypeRxURI, bt []stateRxURI) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e RxURI) doString(s string, m modeTypeRxURI, bt []stateRxURI) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e RxURI) do(r string, m modeTypeRxURI, bt []stateRxURI) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*7 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst1          // initial instruction

	// inst0 unreacheable

	goto unreachable
	goto inst1
inst1: // rune "09AZ__az" -> 2
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03\xfe\xff\xff\x87\xfe\xff\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst2
			}
			goto inst1_fail
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	goto fail

	goto unreachable
	goto inst2
inst2: // alt -> 1, 3
	{
		idx := i*7 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 2 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst1
		}
	}
	bt = append(bt, stateRxURI{c, i, 2, 0})
	goto inst1
inst2_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst3
	}
	goto unreachable

	goto unreachable
	goto inst3
inst3: // string "://" -> 6
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 3 && rs[:3] == "://" {
			i += 3
			goto inst6
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	goto fail

	// inst4 unreacheable

	// inst5 unreacheable

	goto unreachable
	goto inst6
inst6: // rune "\x00\b\v\v\x0e\x1f!\"$.0>@\U0010ffff" -> 7
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\xff\xc9\xff\xff\xf6\x7f\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst7
			}
			goto inst6_fail
		}
		if cr >= 64 && cr <= 1114111 {
			i += sz
			goto inst7
		}
	}
	goto inst6_fail
	goto unreachable
	goto inst6_fail
inst6_fail:
	goto fail

	goto unreachable
	goto inst7
inst7: // alt -> 6, 8
	{
		idx := i*7 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 7 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst6
		}
	}
	bt = append(bt, stateRxURI{c, i, 7, 0})
	goto inst6
inst7_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst8
	}
	goto unreachable

	goto unreachable
	goto inst8
inst8: // rune "\x00\b\v\v\x0e\x1f!\"$>@\U0010ffff" -> 9
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\xff\xc9\xff\xff\xf6\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst9
			}
			goto inst8_fail
		}
		if cr >= 64 && cr <= 1114111 {
			i += sz
			goto inst9
		}
	}
	goto inst8_fail
	goto unreachable
	goto inst8_fail
inst8_fail:
	goto fail

	goto unreachable
	goto inst9
inst9: // alt -> 8, 13
	{
		idx := i*7 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 9 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst8
		}
	}
	bt = append(bt, stateRxURI{c, i, 9, 0})
	goto inst8
inst9_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst13
	}
	goto unreachable

	goto unreachable
	goto inst11
inst11: // rune "\x00\b\v\v\x0e\x1f!\"$\U0010ffff" -> 12
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\xff\xc9\xff\xff\xf6\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst12
			}
			goto inst11_fail
		}
		if cr >= 36 && cr <= 1114111 {
			i += sz
			goto inst12
		}
	}
	goto inst11_fail
	goto unreachable
	goto inst11_fail
inst11_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 12:
			goto inst12_alt
		}
	}
	goto fail

	goto unreachable
	goto inst13
inst13: // alt -> 10, 17
	{
		idx := i*7 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxURI{c, i, 13, 0})
	goto inst10
inst13_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst17
	}
	goto unreachable

	goto unreachable
	goto inst12
inst12: // alt -> 11, 17
	{
		idx := i*7 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 12 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst11
		}
	}
	bt = append(bt, stateRxURI{c, i, 12, 0})
	goto inst11
inst12_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst17
	}
	goto unreachable

	goto unreachable
	goto inst10
inst10: // string "?" -> 12
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "?" {
			i += 1
			goto inst12
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 13:
			goto inst13_alt
		}
	}
	goto fail

	goto unreachable
	goto inst17
inst17: // alt -> 14, 18
	{
		idx := i*7 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxURI{c, i, 17, 0})
	goto inst14
inst17_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst18
	}
	goto unreachable

	goto unreachable
	goto inst14
inst14: // string "#" -> 16
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "#" {
			i += 1
			goto inst16
		}
	}
	goto inst14_fail
	goto unreachable
	goto inst14_fail
inst14_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 17:
			goto inst17_alt
		}
	}
	goto fail

	goto unreachable
	goto inst18
inst18: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto inst16
inst16: // alt -> 15, 18
	{
		idx := i*7 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 16 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst15
		}
	}
	bt = append(bt, stateRxURI{c, i, 16, 0})
	goto inst15
inst16_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst18
	}
	goto unreachable

	goto unreachable
	goto inst15
inst15: // rune "\x00\b\v\v\x0e\x1f!\U0010ffff" -> 16
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\xff\xc9\xff\xff\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst16
			}
			goto inst15_fail
		}
		if cr >= 33 && cr <= 1114111 {
			i += sz
			goto inst16
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 16:
			goto inst16_alt
		}
	}
	goto fail

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 2:
				goto inst2_alt
			case 7:
				goto inst7_alt
			case 9:
				goto inst9_alt
			case 13:
				goto inst13_alt
			case 12:
				goto inst12_alt
			case 17:
				goto inst17_alt
			case 16:
				goto inst16_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchRxURI || m == modeFirstRxURI {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
