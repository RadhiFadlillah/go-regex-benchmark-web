// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="re" -fn="RxIP" -pool=true "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])"

package re

import "regexp/syntax"
import "strings"
import "unicode/utf8"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const RxIPRegexp = "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeRxIP uint8

const (
	modeMatchRxIP modeTypeRxIP = iota
	modeFirstRxIP
	modeLongestRxIP
)

// RxIP implements the regular expression
// "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])"
// with flags 212.
type RxIP struct{}
type stateRxIP struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e RxIP) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [12]stateRxIP // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstRxIP, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e RxIP) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [12]stateRxIP // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestRxIP, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e RxIP) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [12]stateRxIP // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstRxIP, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e RxIP) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [12]stateRxIP // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestRxIP, bt[:0])
	return
}

func (e RxIP) doByteSlice(s []byte, m modeTypeRxIP, bt []stateRxIP) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e RxIP) doString(s string, m modeTypeRxIP, bt []stateRxIP) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e RxIP) do(r string, m modeTypeRxIP, bt []stateRxIP) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*12 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst11         // initial instruction

	goto unreachable
	goto inst1
inst1: // string "2" -> 6
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst6
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // alt -> 2, 4
	{
		idx := i*12 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 6, 0})
	goto inst2
inst6_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst4
	}
	goto unreachable

	goto unreachable
	goto inst2
inst2: // string "5" -> 3
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst3
		}
	}
	goto inst2_fail
	goto unreachable
	goto inst2_fail
inst2_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		}
	}
	goto fail

	goto unreachable
	goto inst3
inst3: // rune "05" -> 12
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst12
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		}
	}
	goto fail

	goto unreachable
	goto inst4
inst4: // rune "04" -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst5
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // rune "09" -> 12
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst12
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst11
inst11: // alt -> 1, 8
	{
		idx := i*12 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 11, 0})
	goto inst1
inst11_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst8
	}
	goto unreachable

	goto unreachable
	goto inst8
inst8: // alt -> 7, 9
	{
		idx := i*12 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 8, 0})
	goto inst7
inst8_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst9
	}
	goto unreachable

	goto unreachable
	goto inst7
inst7: // rune "01" -> 9
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst9
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // rune "09" -> 10
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst10
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst10
inst10: // rune "09" -> 12
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst12
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst12
inst12: // string "." -> 23
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst23
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst23
inst23: // alt -> 13, 20
	{
		idx := i*12 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 23, 0})
	goto inst13
inst23_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst20
	}
	goto unreachable

	goto unreachable
	goto inst13
inst13: // string "2" -> 18
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst18
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 23:
			goto inst23_alt
		}
	}
	goto fail

	goto unreachable
	goto inst18
inst18: // alt -> 14, 16
	{
		idx := i*12 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 18, 0})
	goto inst14
inst18_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst16
	}
	goto unreachable

	goto unreachable
	goto inst14
inst14: // string "5" -> 15
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst15
		}
	}
	goto inst14_fail
	goto unreachable
	goto inst14_fail
inst14_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 18:
			goto inst18_alt
		}
	}
	goto fail

	goto unreachable
	goto inst16
inst16: // rune "04" -> 17
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst17
		}
	}
	goto inst16_fail
	goto unreachable
	goto inst16_fail
inst16_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 23:
			goto inst23_alt
		}
	}
	goto fail

	goto unreachable
	goto inst17
inst17: // rune "09" -> 24
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst24
		}
	}
	goto inst17_fail
	goto unreachable
	goto inst17_fail
inst17_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 23:
			goto inst23_alt
		}
	}
	goto fail

	goto unreachable
	goto inst15
inst15: // rune "05" -> 24
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst24
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 18:
			goto inst18_alt
		}
	}
	goto fail

	goto unreachable
	goto inst20
inst20: // alt -> 19, 21
	{
		idx := i*12 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 20, 0})
	goto inst19
inst20_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst21
	}
	goto unreachable

	goto unreachable
	goto inst19
inst19: // rune "01" -> 21
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst21
		}
	}
	goto inst19_fail
	goto unreachable
	goto inst19_fail
inst19_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 20:
			goto inst20_alt
		}
	}
	goto fail

	goto unreachable
	goto inst21
inst21: // rune "09" -> 22
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst22
		}
	}
	goto inst21_fail
	goto unreachable
	goto inst21_fail
inst21_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 20:
			goto inst20_alt
		}
	}
	goto fail

	goto unreachable
	goto inst22
inst22: // rune "09" -> 24
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst24
		}
	}
	goto inst22_fail
	goto unreachable
	goto inst22_fail
inst22_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 20:
			goto inst20_alt
		}
	}
	goto fail

	goto unreachable
	goto inst24
inst24: // string "." -> 35
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst35
		}
	}
	goto inst24_fail
	goto unreachable
	goto inst24_fail
inst24_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 18:
			goto inst18_alt
		case 20:
			goto inst20_alt
		case 23:
			goto inst23_alt
		}
	}
	goto fail

	goto unreachable
	goto inst30
inst30: // alt -> 26, 28
	{
		idx := i*12 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 30, 0})
	goto inst26
inst30_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst28
	}
	goto unreachable

	goto unreachable
	goto inst25
inst25: // string "2" -> 30
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst30
		}
	}
	goto inst25_fail
	goto unreachable
	goto inst25_fail
inst25_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 35:
			goto inst35_alt
		}
	}
	goto fail

	goto unreachable
	goto inst26
inst26: // string "5" -> 27
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst27
		}
	}
	goto inst26_fail
	goto unreachable
	goto inst26_fail
inst26_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 30:
			goto inst30_alt
		}
	}
	goto fail

	goto unreachable
	goto inst27
inst27: // rune "05" -> 36
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst36
		}
	}
	goto inst27_fail
	goto unreachable
	goto inst27_fail
inst27_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 30:
			goto inst30_alt
		}
	}
	goto fail

	goto unreachable
	goto inst28
inst28: // rune "04" -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst29
		}
	}
	goto inst28_fail
	goto unreachable
	goto inst28_fail
inst28_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 35:
			goto inst35_alt
		}
	}
	goto fail

	goto unreachable
	goto inst29
inst29: // rune "09" -> 36
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst36
		}
	}
	goto inst29_fail
	goto unreachable
	goto inst29_fail
inst29_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 35:
			goto inst35_alt
		}
	}
	goto fail

	goto unreachable
	goto inst35
inst35: // alt -> 25, 32
	{
		idx := i*12 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 35, 0})
	goto inst25
inst35_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst32
	}
	goto unreachable

	goto unreachable
	goto inst31
inst31: // rune "01" -> 33
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst33
		}
	}
	goto inst31_fail
	goto unreachable
	goto inst31_fail
inst31_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 32:
			goto inst32_alt
		}
	}
	goto fail

	goto unreachable
	goto inst32
inst32: // alt -> 31, 33
	{
		idx := i*12 + 8
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 32, 0})
	goto inst31
inst32_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst33
	}
	goto unreachable

	goto unreachable
	goto inst33
inst33: // rune "09" -> 34
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst34
		}
	}
	goto inst33_fail
	goto unreachable
	goto inst33_fail
inst33_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 18:
			goto inst18_alt
		case 20:
			goto inst20_alt
		case 23:
			goto inst23_alt
		case 32:
			goto inst32_alt
		}
	}
	goto fail

	goto unreachable
	goto inst34
inst34: // rune "09" -> 36
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst36
		}
	}
	goto inst34_fail
	goto unreachable
	goto inst34_fail
inst34_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 18:
			goto inst18_alt
		case 20:
			goto inst20_alt
		case 23:
			goto inst23_alt
		case 32:
			goto inst32_alt
		}
	}
	goto fail

	goto unreachable
	goto inst36
inst36: // string "." -> 47
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst47
		}
	}
	goto inst36_fail
	goto unreachable
	goto inst36_fail
inst36_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 18:
			goto inst18_alt
		case 20:
			goto inst20_alt
		case 23:
			goto inst23_alt
		case 30:
			goto inst30_alt
		case 32:
			goto inst32_alt
		case 35:
			goto inst35_alt
		}
	}
	goto fail

	goto unreachable
	goto inst47
inst47: // alt -> 37, 44
	{
		idx := i*12 + 9
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 47, 0})
	goto inst37
inst47_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst44
	}
	goto unreachable

	goto unreachable
	goto inst37
inst37: // string "2" -> 42
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst42
		}
	}
	goto inst37_fail
	goto unreachable
	goto inst37_fail
inst37_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 47:
			goto inst47_alt
		}
	}
	goto fail

	goto unreachable
	goto inst38
inst38: // string "5" -> 39
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst39
		}
	}
	goto inst38_fail
	goto unreachable
	goto inst38_fail
inst38_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 42:
			goto inst42_alt
		}
	}
	goto fail

	goto unreachable
	goto inst39
inst39: // rune "05" -> 48
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst48
		}
	}
	goto inst39_fail
	goto unreachable
	goto inst39_fail
inst39_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 42:
			goto inst42_alt
		}
	}
	goto fail

	goto unreachable
	goto inst42
inst42: // alt -> 38, 40
	{
		idx := i*12 + 10
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 42, 0})
	goto inst38
inst42_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst40
	}
	goto unreachable

	goto unreachable
	goto inst41
inst41: // rune "09" -> 48
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst48
		}
	}
	goto inst41_fail
	goto unreachable
	goto inst41_fail
inst41_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 47:
			goto inst47_alt
		}
	}
	goto fail

	goto unreachable
	goto inst40
inst40: // rune "04" -> 41
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst41
		}
	}
	goto inst40_fail
	goto unreachable
	goto inst40_fail
inst40_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 47:
			goto inst47_alt
		}
	}
	goto fail

	goto unreachable
	goto inst43
inst43: // rune "01" -> 45
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst45
		}
	}
	goto inst43_fail
	goto unreachable
	goto inst43_fail
inst43_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst44
inst44: // alt -> 43, 45
	{
		idx := i*12 + 11
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateRxIP{c, i, 44, 0})
	goto inst43
inst44_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst45
inst45: // rune "09" -> 46
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst46
		}
	}
	goto inst45_fail
	goto unreachable
	goto inst45_fail
inst45_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 18:
			goto inst18_alt
		case 20:
			goto inst20_alt
		case 23:
			goto inst23_alt
		case 30:
			goto inst30_alt
		case 32:
			goto inst32_alt
		case 35:
			goto inst35_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst48
inst48: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto inst46
inst46: // rune "09" -> 48
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst48
		}
	}
	goto inst46_fail
	goto unreachable
	goto inst46_fail
inst46_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 18:
			goto inst18_alt
		case 20:
			goto inst20_alt
		case 23:
			goto inst23_alt
		case 30:
			goto inst30_alt
		case 32:
			goto inst32_alt
		case 35:
			goto inst35_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	// inst0 unreacheable

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 6:
				goto inst6_alt
			case 11:
				goto inst11_alt
			case 8:
				goto inst8_alt
			case 23:
				goto inst23_alt
			case 18:
				goto inst18_alt
			case 20:
				goto inst20_alt
			case 30:
				goto inst30_alt
			case 35:
				goto inst35_alt
			case 32:
				goto inst32_alt
			case 47:
				goto inst47_alt
			case 42:
				goto inst42_alt
			case 44:
				goto inst44_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchRxIP || m == modeFirstRxIP {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
